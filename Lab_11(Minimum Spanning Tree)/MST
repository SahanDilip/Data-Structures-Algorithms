#include <bits/stdc++.h>
using namespace std;

int minKey(int keyArray[], bool mstArray[]) {
    int minValue = INT_MAX, minIndex;

    for (int vertex = 0; vertex < 6; vertex++)
        if (mstArray[vertex] == false && keyArray[vertex] < minValue)
            minValue = keyArray[vertex],
            minIndex = vertex;

    return minIndex;
}

void printMST(int parent[], int graph[6][6])
{
    int totalWeight = 0;
    cout << "Minimum Spanning Tree Edges: \n";
    for (int i = 1; i < 6; i++) {
        cout << "(" << parent[i] << ", " << i << ") --> " << graph[i][parent[i]] << "\n";
        totalWeight += graph[i][parent[i]];
    }
    cout << "Total weight of MST: " << totalWeight << "\n";
}


void primMST(int graphMatrix[6][6]) {
    int parentArray[6];
    int keyArray[6];
    bool mstArray[6];

    for (int i = 0; i < 6; i++)
        keyArray[i] = INT_MAX, mstArray[i] = false;

    keyArray[0] = 0;
    parentArray[0] = -1;

    for (int count = 0; count < 5; count++) {
        int u = minKey(keyArray, mstArray);
        mstArray[u] = true;

        for (int v = 0; v < 6; v++)
            if (graphMatrix[u][v] && mstArray[v] == false
                && graphMatrix[u][v] < keyArray[v])
                parentArray[v] = u, keyArray[v] = graphMatrix[u][v];
    }

    printMST(parentArray, graphMatrix);
}

int main() {
    int graphMatrix[6][6] = { { 0, 3, 0, 0, 0,1 },
                               { 3, 0, 2, 1, 10,0 },
                               { 0, 2, 0,3, 0, 5 },
                               { 0, 1, 3, 0,5 ,0 },
                               { 0, 10, 0,5, 0, 4 },
                               {1, 0, 5, 0, 4, 0} };

    primMST(graphMatrix);

    return 0;
}
